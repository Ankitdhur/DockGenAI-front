import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { apiService } from "@/lib/api";
import { toast } from "sonner";

interface ResultCardProps {
  dockerfile: string;
  imageTag: string;
  generationId?: string;
}

export default function ResultCard({ dockerfile, imageTag, generationId }: ResultCardProps) {
  const handlePushToGitHub = async () => {
    if (!generationId) {
      toast.error("Generation ID not available");
      return;
    }

    try {
      await apiService.pushDockerfile(generationId, "Add Dockerfile generated by DockGen AI");
      toast.success("Dockerfile pushed to GitHub successfully!");
    } catch (error) {
      toast.error(error instanceof Error ? error.message : "Failed to push to GitHub");
    }
  };

  return (
    <Card className="mt-8 p-6 bg-black/40 border border-white/10 rounded-xl shadow-inner">
      <h4 className="text-lg font-semibold mb-3 text-cyan-300">Generated Dockerfile:</h4>
      <pre className="p-4 rounded-md bg-slate-900/60 border border-white/10 overflow-x-auto text-sm text-green-300 font-mono">
        {dockerfile}
      </pre>
      <div className="mt-4 flex items-center justify-between">
        <p className="text-sm text-gray-300">
          âœ… Docker Image Built: <span className="text-indigo-400">{imageTag}</span>
        </p>
        {generationId && (
          <Button
            onClick={handlePushToGitHub}
            className="bg-gradient-to-r from-green-500 to-blue-500 hover:opacity-90"
            size="sm"
          >
            Push to GitHub
          </Button>
        )}
      </div>
    </Card>
  );
}
